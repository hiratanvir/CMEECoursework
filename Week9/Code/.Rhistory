names.arg = c("1", "2-3", "4-7", "8-15", "16-31", "32-63","64-127","128-255","256-511","512-1023"),
col = "darkred")
barplot(total_octaves2500, main ="Average Species Abundance Distribution for community size(J) = 2500",
xlab = "Average Species Abundance Octaves",
ylab = "Avergae Count",
names.arg = c("1", "2-3", "4-7", "8-15", "16-31", "32-63","64-127","128-255","256-511","512-1023","1024-2047"),
col = "darkred")
barplot(total_octaves5000, main ="Average Species Abundance Distribution for community size(J) = 5000",
xlab = "Average Species Abundance Octaves",
ylab = "Avergae Count",
names.arg = c("1", "2-3", "4-7", "8-15", "16-31", "32-63","64-127","128-255","256-511","512-1023","1024-2047"),
col = "darkred")
}
Load_cluster()
dev.off()
source('~/CMEECoursework/Week9/Code/htanvir.R')
source('~/CMEECoursework/Week9/Code/htanvir.R')
species_richness(c(1,2,3,4,5,6,))
source('~/CMEECoursework/Week9/Code/htanvir.R')
source('~/CMEECoursework/Week9/Code/htanvir.R')
source('~/CMEECoursework/Week9/Code/htanvir.R')
species_richness(c(1,4,5,2,2,1))
chaos_game()
#22. The chaos game
# Initialising triangle
a <- c(0,0)
b <- c(3,4)
c <- c(4,1)
list <- list(a, b, c)
plot.new()
plot.window(xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
#Initialising starting co-ordinates
vec_x <- c(0,0)
points(vec_x[1], vec_x[2], cex=0.5)
chaos_game <- function(){
for(n in 1:10000){
n <- list[[sample(1:3, 1)]]
x <- (vec_x[1]+(n[1]-vec_x[1]) / 2)
y <- (vec_x[2]+(n[2]-vec_x[2]) / 2)
vec_x <- c(x,y)
points(x, y, cex = 0.5, col="thistle4")
}
}
chaos_game()
?dev.off
?graphics.off
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
#23.
graphics.off()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
graphics.off()
#22. The chaos game
# Initialising triangle
a <- c(0,0)
b <- c(3,4)
c <- c(4,1)
list <- list(a, b, c)
plot.new()
plot.window(xlim=c(0,5), ylim=c(0,5), xlab="x", ylab="y")
#Initialising starting co-ordinates
vec_x <- c(0,0)
points(vec_x[1], vec_x[2], cex=0.5)
chaos_game <- function(){
for(n in 1:10000){
n <- list[[sample(1:3, 1)]]
x <- (vec_x[1]+(n[1]-vec_x[1]) / 2)
y <- (vec_x[2]+(n[2]-vec_x[2]) / 2)
vec_x <- c(x,y)
points(x, y, cex = 0.5, col="thistle4")
}
}
chaos_game()
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
# Draws a line of a given length from a single point & returns a vector of the endpoint
turtle <- function (start_position, theta , length)
{
opposite = sin(theta) * length
adjacent = cos(theta) * length
x2 = start_position[1] + adjacent
y2 = start_position[2] + opposite
lines(c(start_position[1], x2), c(start_position[2], y2))
return(c(x2, y2))
}
turtle()
turtle(c(0,0), pi/2, 2)
elbow(c(0,0), pi/2, 2)
spiral(c(0,0), pi/2, 2)
tree(c(0,0), pi/2, 2)
tree(c(0,0), pi/2, 20)
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
source('~/CMEECoursework/Week9/Code/htanvir.R')
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
#23.
dev.off()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
plot.new()
plot.window(xlim=c(0,5), ylim=c(0,5))
# Initialising triangle
a <- c(0,0)
b <- c(3,4)
c <- c(4,1)
list <- list(a, b, c)
rm(list=ls())
source('~/CMEECoursework/Week9/Code/htanvir.R')
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
tree(c(0,0), pi/2, 20)
source('~/CMEECoursework/Week9/Code/cluster_run.R')
source('~/CMEECoursework/Week9/Code/htanvir.R')
species_richness(c(1,4,4,5,1,6,1))
initialise_min(7)
choose_two(2)
choose_two(7)
neutral_step(c(1,4,4,5,1,6,1))
neutral_generation(c(1,4,4,5,1,6,1))
#6. Function to simulate several neutral_steps on a community so that a generation has
# passed and returns the state of the community without speciation - after a species has died and has been
# replaced by another species already present.
neutral_generation <- function(community){
generation= round(length(community)/2)
for (i in 1:generation){
community=neutral_step(community)
}
return(community)
}
neutral_generation(c(10,15,13,12))
neutral_generation(c(1,4,4,5,1,6,1))
neutral_generation(c(1,4,4,5,1,6,1))
neutral_generation(c(1,4,4,5,1,6,1))
neutral_generation(c(1,4,4,5,1,6,1))
neutral_generation(c(1,4,4,5,1,6,1))
neutral_generation(c(1,4,4,5,1,6,1))
neutral_time_series(7, 10)
neutral_time_series(initialise_max(7), 10)
neutral_step_speciation(c(10,15,13), 0.2)
neutral_step_speciation(c(10,15,13), 0.2)
neutral_step_speciation(c(10,15,13), 0.2)
neutral_generation_speciation(c(10,5,13), 0.2)
neutral_generation_speciation(c(10,5,13), 0.2)
neutral_generation_speciation(c(10,5,13), 0.2)
neutral_generation_speciation(c(10,5,13), 0.2)
neutral_generation_speciation(c(10,5,13), 0.2)
neutral_generation_speciation(c(2,4,6,8,0), 0.2)
neutral_step_speciation(c(2,4,6,8,0), 0.2)
neutral_step_speciation(c(2,4,6,8,0), 0.2)
neutral_step_speciation(c(2,4,6,8,0), 0.2)
neutral_step_speciation(c(2,4,6,8,0), 0.2)
neutral_step_speciation(c(2,4,6,8,0), 0.2)
neutral_step_speciation(c(2,4,6,8,0), 0.2)
neutral_step_speciation(c(2,4,6,8,0), 0.2)
neutral_generation_speciation(c(2,4,6,8,0), 0.2)
neutral_generation_speciation(c(2,4,6,8,0), 0.2)
neutral_generation_speciation(c(2,4,6,8,0), 0.2)
neutral_time_series_speciation(c(2,4,6,8,0), 0.2, 20)
question_12()
question_12()
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Min = initialise_min(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
}
question_16()
Initial_Min = initialise_min(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
Initial_Min = initialise_min(100)
for(i in 1:200){
Initial_Min <- neutral_generation_speciation(Initial_Min, 0.1)}
Initial_Min
initialise_max(100)
initialise_min(100)
neutral_generation_speciation((initialise_min(100),0.1)
neutral_generation_speciation((initialise_min(100), 0.1)
neutral_generation_speciation((initialise_min(100)), 0.1)
for(i in 1:200){
Initial_Min <- neutral_generation_speciation(initialise_min(100), 0.1)
}
Initial_Min
Initial_Min = initialise_min(100)
for(i in 1:200){
Initial_Min <- neutral_generation_speciation(Initial_Min, 0.1)
}
Initial_Min
?table
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance <- function(community){
abundances = sort(table(community))
return(abundances)
}
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance(c(1,5,3,6,5,6,1,1))
#13.
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(abundances)
}
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(sort(abundances))
}
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance(c(1,5,3,6,5,6,1,1))
?sort
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(sort(abundances), decreasing=TRUE)
}
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance(c(1,5,3,6,5,6,1,1))
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(sort((abundances), decreasing = TRUE))
}
species_abundance(c(1,5,3,6,5,6,1,1))
octaves(c(100,64,63,5,4,3,2,2,1,1,1,1))
#13.
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(sort((abundances), decreasing = TRUE))
}
question_16()
question_16()
#16.
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Min = initialise_min(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
#appending octaves at current time to our list of octaves
for(i in 1:generation){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
#for every 20 generations, adds octaves to octave list
if(i %% 20 == 0){
octavelist <- c(octavelist, list(octaves(species_abundance(Initial_Min))))
}
}
total_octaves = vector()
for(i in 1:length(octavelist)){
total_octaves <- sum_vect(total_octaves, octavelist[[i]])
}
mean_octaves <- total_octaves/(length(octavelist)) #the length(octavelist) equals the number of times an octave is noted
#print(mean_octaves) #make a bar plot of these values
barplot(mean_octaves, main ="Average Species Abundance Distribution(as octaves)",
xlab = "Average Species Abundance Octaves",
ylab = "Avergae Count",
names.arg = c("1", "2-3", "4-7", "8-15", "16-31", "32-63"),
col = "darkred")
}
question_16()
#13.
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(abundances)
#return(sort((abundances), decreasing = TRUE))
}
question_16()
#13.
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(sort((abundances), decreasing = TRUE))
}
question_16()
source('~/CMEECoursework/Week9/Code/htanvir.R')
question_16()
octaves(species_abundance(c(1,5,3,6,5,6,1,1)))
#16.
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Min = initialise_max(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
#appending octaves at current time to our list of octaves
for(i in 1:generation){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
#for every 20 generations, adds octaves to octave list
if(i %% 20 == 0){
octavelist <- c(octavelist, list(octaves(species_abundance(Initial_Min))))
}
}
total_octaves = vector()
for(i in 1:length(octavelist)){
total_octaves <- sum_vect(total_octaves, octavelist[[i]])
}
mean_octaves <- total_octaves/(length(octavelist)) #the length(octavelist) equals the number of times an octave is noted
#print(mean_octaves) #make a bar plot of these values
barplot(mean_octaves, main ="Average Species Abundance Distribution(as octaves)",
xlab = "Average Species Abundance Octaves",
ylab = "Avergae Count",
names.arg = c("1", "2-3", "4-7", "8-15", "16-31", "32-63"),
col = "darkred")
}
question_16()
#16.
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Min = initialise_min(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
#appending octaves at current time to our list of octaves
for(i in 1:generation){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
#for every 20 generations, adds octaves to octave list
if(i %% 20 == 0){
octavelist <- c(octavelist, list(octaves(species_abundance(Initial_Min))))
}
}
total_octaves = vector()
for(i in 1:length(octavelist)){
total_octaves <- sum_vect(total_octaves, octavelist[[i]])
}
mean_octaves <- total_octaves/(length(octavelist)) #the length(octavelist) equals the number of times an octave is noted
#print(mean_octaves) #make a bar plot of these values
barplot(mean_octaves, main ="Average Species Abundance Distribution(as octaves)",
xlab = "Average Species Abundance Octaves",
ylab = "Avergae Count",
names.arg = c("1", "2-3", "4-7", "8-15", "16-31", "32-63"),
col = "darkred")
}
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
question_8()
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
chaos_game()
source('~/CMEECoursework/Week9/Code/htanvir.R')
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
tree(c(c20,-35), pi/2, 25)
tree(c(c(20,-35), pi/2, 25))
tree(c(20,-35), pi/2, 25)
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
fern_2(c(20,-35), pi/2, 15)
fern_2(c(20,-35), pi/2, 15, 1)
source('~/CMEECoursework/Week9/Code/htanvir.R')
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
spiral(c(20,-35), pi/2, 25)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral(c(0,-10), pi/2, 25)
spiral(c(-10,-10), pi/2, 25)
spiral(c(-15,-10), pi/2, 25)
spiral(c(-20,-10), pi/2, 25)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral(c(-20,-10), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,25), ylim = c(-25,25))
spiral(c(-20,-15), pi/2, 30)
spiral(c(-20,-25), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,25), ylim = c(-25,25))
spiral(c(-20,-15), pi/2, 30)
spiral(c(-25,-15), pi/2, 30)
spiral(c(-25,-25), pi/2, 30)
spiral(c(-25,-25), pi/2, 20)
plot.new()
plot.window(xlim= c(-25,25), ylim = c(-25,25))
spiral(c(-25,-25), pi/2, 20)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral(c(-25,-25), pi/2, 30)
spiral(c(-25,-20), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral(c(-25,-20), pi/2, 30)
spiral(c(-25,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral(c(-25,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral_2(c(-25,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral_2(c(-25,-15), pi/2, 20)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
spiral_2(c(-25,-15), pi/2, 30)
plot.new()
spiral_2(c(-25,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
tree(c(-25,-15), pi/2, 30)
plot.window(xlim= c(-50,50), ylim = c(-25,100))
plot.new()
plot.window(xlim= c(-50,50), ylim = c(-25,100))
tree(c(-25,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
tree(c(-25,-15), pi/2, 30)
tree(c(-15,-15), pi/2, 30)
tree(c(-10,-15), pi/2, 30)
tree(c(0,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-25,50), ylim = c(-25,50))
tree(c(0,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
tree(c(0,-15), pi/2, 30)
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
fern(c(0,-15), pi/2, 30)
fern(c(0,-15), pi/2, 20)
fern(c(-15,-15), pi/2, 20)
fern(c(0,-35), pi/2, 20)
fern(c(0,-50), pi/2, 20)
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
fern(c(0,-50), pi/2, 20)
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
fern_2(c(0,-50), pi/2, 20)
plot.new()
plot.window(xlim= c(-50,100), ylim = c(-50,100))
fern_2(c(0,-50), pi/2, 20, 1)
source('~/CMEECoursework/Week9/Code/htanvir.R')
Load_cluster()
source('~/CMEECoursework/Week9/Code/htanvir.R')
file_path <- ("../Data/cluster_result")
total_octaves500 = vector()
total_octaves1000 = vector()
total_octaves2500 = vector()
total_octaves5000 = vector()
#initialising counter for each community size
counter500 = 0
counter1000 = 0
counter2500 = 0
counter5000 = 0
for(i in 1:100){
output_data = paste(file_path, i, ".rda", sep="")
load(output_data)
interval_oct = size/10
burn_in_generations = 8*size
if(size==500){
#only loading in the octavelist results for generations AFTER the burn-in period of 8*size
for(n in ((burn_in_generations/interval_oct)+1):length(octavelist)){
total_octaves500 <- sum_vect(total_octaves500, octavelist[[n]])
counter500 = counter500+1
}
}
if(size==1000){
for(n in ((burn_in_generations/interval_oct)+1):length(octavelist)){
total_octaves1000 <- sum_vect(total_octaves1000, octavelist[[n]])
counter1000 = counter1000+1
}
}
if(size==2500){
for(n in ((burn_in_generations/interval_oct)+1):length(octavelist)){
total_octaves2500 <- sum_vect(total_octaves2500, octavelist[[n]])
counter2500 = counter2500+1
}
}
if(size==5000){
for(n in ((burn_in_generations/interval_oct)+1):length(octavelist)){
total_octaves5000 <- sum_vect(total_octaves5000, octavelist[[n]])
counter5000 = counter5000+1
}
}
}
total_octaves500 = total_octaves500/counter500
total_octaves1000 = total_octaves1000/counter1000
total_octaves2500 = total_octaves2500/counter2500
total_octaves5000 = total_octaves5000/counter5000
total_octaves500
total_octaves1000
total_octaves2500
total_octaves5000
signif(total_octaves500, 4)
total_octaves500
signif(total_octaves500, 3)
signif(total_octaves500, 4)
signif(total_octaves1000, 4)
signif(total_octaves2500, 4)
signif(total_octaves2500, 3)
options(scipen = 999)
total_octaves2500
source('~/CMEECoursework/Week9/Code/htanvir.R')
Load_cluster()
