source('~/CMEECoursework/Week9/Code/htanvir.R')
neutral_step(c(10,5,13))
runif(1)
?runif
source('~/CMEECoursework/Week9/Code/htanvir.R')
neutral_step_speciation(community, 0.2)
#9.
neutral_step_speciation <- function(community, v){
prob = runif(1, 0, 1)
if(v<prob){
index = choose_two(length(community)) #this returns 2 positions from community to use as points to swap at random in a community
community[index[1]] = community[index[2]] #you're picking an index(the nth item of a species) out of the community and replacing that in index 2
}
else{
new_species = max(community) + 1
index = sample((length(community)), size=1, replace = TRUE)
community[index] = new_species
}
return(community)
}
neutral_step_speciation(community, 0.2)
source('~/CMEECoursework/Week9/Code/htanvir.R')
#10.
neutral_generation_speciation <- function(community, v){
generation= round(length(community)/2)
for(i in 1:generation){
new_community = neutral_generation_speciation(community, v)
}
return(new_community)
}
neutral_generation_speciation(community, 0.2)
test = neutral_generation_speciation(community, 0.2)
#10.
neutral_generation_speciation <- function(community, v){
generation= round(length(community)/2)
for(i in 1:generation){
new_community = neutral_generation_speciation(community, v)
}
return(new_community)
}
test = neutral_generation_speciation(community, 0.2)
community
#10.
neutral_generation_speciation <- function(community, v){
generation= round(length(community)/2)
for(i in 1:generation){
new_community = neutral_step_speciation(community, v)
}
return(new_community)
}
test = neutral_generation_speciation(community, 0.2)
#10.
neutral_generation_speciation <- function(community, v){
generation= round(length(community)/2)
for(i in 1:generation){
community = neutral_step_speciation(community, v)
}
return(community)
}
test = neutral_generation_speciation(community, 0.2)
test
neutral_generation_speciation(community, 0.2)
#10.
neutral_generation_speciation <- function(community, v){
generation= round(length(community)/2)
for(i in 1:generation){
new_community = neutral_step_speciation(community, v)
community = new_community
}
return(new_community)
}
neutral_generation_speciation(community, 0.2)
neutral_time_series(initial = initialise_max(7), duration = 20)
#11.
neutral_time_series_speciation <- function(community, v, duration){
list = vector()
list[1] = species_richness(initial)
for(i in 1:duration){
initial <- neutral_generation_speciation(initial) #for each generation
list[i+1] <- species_richness(initial) #add to list, the species richness for that generation
}
return (list)
}
neutral_time_series_speciation(community, 0.2, 20)
neutral_generation_speciation(initialise_max(community))
neutral_time_series <- function(initial, duration){
list = vector()
list[1] = species_richness(initial)
for(i in 1:duration){
initial <- neutral_generation(initial) #for each generation
list[i+1] <- species_richness(initial) #add to list, the species richness for that generation
}
return (list)
}
#6. Function to simulate several neutral_steps on a community so that a generation has
# passed.
neutral_generation <- function(community){
generation= round(length(community)/2)
for (i in 1:generation){
community=neutral_step(community)
}
return(community)
}
neutral_generation(c(1,4,4,1,5,1,6))
#11.
neutral_time_series_speciation <- function(community, v, duration){
list = vector()
list[1] = species_richness(community)
for(i in 1:duration){
community <- neutral_generation_speciation(community, v) #for each generation
list[i+1] <- species_richness(community) #add to list, the species richness for that generation
}
return (list)
}
neutral_time_series_speciation(community, 0.2, 20)
initialise_max(community)
initialise_max(7)
initialise_min(7)
?seq
}
}
}
}
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_generation_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_generation_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, Initial_Min~gen, xlab="generation", ylab="Species Richness", main="Neutral model simulation with speciation")
}
question_12()
question_12(100, 0.1, 200)
#8.
question_8 <- function(size=100, generation=200){
SpeciesRich = neutral_time_series(initialise_max(size), duration = generation)
gen = seq(0, generation, 1)
plot(SpeciesRich~gen, xlab="generation", ylab="Species Richness", main="Neutral model simulation")
}
question_8()
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_generation_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_generation_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, xlab="generation", ylab="Species Richness", main="Neutral model simulation with speciation")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, xlab="generation", ylab="Species Richness", main="Neutral model simulation with speciation")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, Initial_Min~gen, xlab="generation", ylab="Species Richness", main="Neutral model simulation with speciation")
}
question_12()
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlab="generation", ylab="Species Richness", main="Neutral model simulation with speciation")
plot(Initial_Min~gen, type="l", col="blue", xlab="generation", ylab="Species Richness", main="Neutral model simulation with speciation")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlim=range(gen), ylim(c(Initial_Max, Initial_Min)))
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlim=range(gen), ylim(c(Initial_Max, Initial_Min)))
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)))
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)))
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="generation", ylab="Species Richness")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="generation", ylab="Species Richness")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="generation", ylab="Species Richness", main="Neutal Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="generation", ylab="Species Richness")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="generation", ylab="Species Richness", main="Neutal Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)))
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="generation", ylab="Species Richness")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlim=range(gen), ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", xlab="Generation", ylab="Species Richness")
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness")
}
question_12()
?legend
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness")
legend('topright', names(a)[-1] ,
lty=1, col=c('red', 'blue'), bty='n', cex=.75)
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness")
legend(180,95, c("Initial Maximum state", "Initial Minimun state"), lty=c(1,1), lwd=c(2.5,2.5), col=c("red", "blue"))
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness")
legend(150,95, c("Initial Maximum state", "Initial Minimun state"), lty=c(1,1), lwd=c(1.5,1.5), col=c("red", "blue"))
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness")
legend(100,95, c("Initial Maximum state", "Initial Minimun state"), lty=c(1,1), lwd=c(1.5,1.5), col=c("red", "blue"))
}
question_12()
#12. Community size = J
question_12 <- function(J=100, v=0.1, generation=200){
Initial_Max = neutral_time_series_speciation(community=initialise_max(J), v=0.1, duration=generation)
Initial_Min = neutral_time_series_speciation(community=initialise_min(J), v=0.1, duration=generation)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
plot(Initial_Max~gen, type="l", col="red", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness", main="Neutral Simulation with Speciation")
par(new=T)
plot(Initial_Min~gen, type="l", col="blue", ylim=range(c(Initial_Max, Initial_Min)), xlab="Generation", ylab="Species Richness")
legend("topright", c("Initial Maximum state", "Initial Minimun state"), lty=c(1,1), lwd=c(1.5,1.5), col=c("red", "blue"))
}
question_12()
#14.
octaves <- function(a){
oct_classes = tabulate(floor(log2(a))+1)
return(oct_classes)
}
a = species_abundance(community)
#13.
species_abundance <- function(community){
abundances = as.numeric(table(community))
return(abundances)
}
a = species_abundance(community)
octaves(a)
x <- c(1, 3, 5, 7)
y <- c(1, 2, 4, 8)
sum(x +y)
x + y
z <- c(1, 3)
x + z
#15.
sum_vect <- function(x, y){
n <- max(length(x), length(y))
if (length(x) < length(y)){
x = c(x, rep(0, length(y)-length(x)))
sum = x + y
}
else if (length(x) > length(y)){
y = c(y, rep(0, length(x)-length(y)))
sum = x + y
}
else {
sum = x + y
}
return (sum)
}
x <- c(1, 2, 3, 4, 5, 6)
y <- c(1, 2, 3)
sum_vect(x, y)
#16.
question_16 <- function(community, v, duration){
for(i in 1:duration){
community <- neutral_generation_speciation(community, v)
}
return(community)
}
#16.
question_16 <- function(J=100, v=0.1, generation = 200){
for(i in 1:duration){
community <- neutral_generation_speciation(community, v)
}
return(community)
}
#16.
question_16 <- function(J=100, v=0.1, generation = 200){
for(i in 1:generation){
community <- neutral_generation_speciation(community, v)
}
return(community)
}
question_16()
#16.
question_16 <- function(J=100, v=0.1, generation = 200){
for(i in 1:generation){
Initial_Max = neutral_generation_speciation(community=initialise_max(J), v=0.1)
Initial_Min = neutral_generation_speciation(community=initialise_min(J), v=0.1)
gen = seq(0, generation, 1) #from 0 to generation, with intervals of 1
}
}
question_16()
#16.
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Max = initialise_max(J)
Initial_Min = initialise_min(J)
for(i in 1:burnin){
Initial_Max <- neutral_generation_speciation(Initial_Max, v)
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
# gen = seq(0, burnin, 1) #from 0 to generation, with intervals of 1
}
return(Initial_Max)
}
question_16()
source('~/CMEECoursework/Week9/Code/htanvir.R')
octaveslist_min
octavelist_min
#16.
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Min = initialise_min(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
#appending octaves at current time to our list of octaves
for(i in 1:generation){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
#for every 20 generations, adds octaves to octave list
if(i %% 20 == 0){
octavelist <- c(octavelist, list(octaves(species_abundance(Initial_Min))))
}
}
}
question_16()
mean_octaves = total_octaves/(length(octavelist)) #the length(octavelist) equals the number of times an octave is noted
#appending octaves at current time to our list of octaves
for(i in 1:generation){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
#for every 20 generations, adds octaves to octave list
if(i %% 20 == 0){
octavelist <- c(octavelist, list(octaves(species_abundance(Initial_Min))))
}
}
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
source('~/CMEECoursework/Week9/Code/htanvir.R')
#16.
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Min = initialise_min(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
#appending octaves at current time to our list of octaves
for(i in 1:generation){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
#for every 20 generations, adds octaves to octave list
if(i %% 20 == 0){
octavelist <- c(octavelist, list(octaves(species_abundance(Initial_Min))))
}
}
total_octaves = vector()
for(i in 1:length(octavelist)){
total_octaves <- sum_vect(total_octaves, octavelist[[i]])
}
mean_octaves = total_octaves/(length(octavelist)) #the length(octavelist) equals the number of times an octave is noted
}
question_16()
#16.
question_16 <- function(J=100, v=0.1, generation = 2000, burnin= 200){
Initial_Min = initialise_min(J)
octavelist <- list()
for(i in 1:burnin){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
}
#appending octaves at current time to our list of octaves
for(i in 1:generation){
Initial_Min <- neutral_generation_speciation(Initial_Min, v)
#for every 20 generations, adds octaves to octave list
if(i %% 20 == 0){
octavelist <- c(octavelist, list(octaves(species_abundance(Initial_Min))))
}
}
total_octaves = vector()
for(i in 1:length(octavelist)){
total_octaves <- sum_vect(total_octaves, octavelist[[i]])
}
mean_octaves = total_octaves/(length(octavelist)) #the length(octavelist) equals the number of times an octave is noted
print(mean_octaves)
}
source('~/CMEECoursework/Week9/Code/htanvir.R')
question_16()
