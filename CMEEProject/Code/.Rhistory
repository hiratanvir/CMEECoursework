nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*N)
}
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2)
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
for (i in 2:(t+1))
{
#initialise Nt as the new population size at t=0
Nt <- 100
for(i in 2:length(N)){
Nt[i] <- RO*Nt/(1+(Nt/M))
}
df <- data.frame(Time=1:length(Nt), Nt)
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=2*N, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*N)
}
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
p=0.5
t=4
N=10
d=0.6
RO=2
M=10
Nt = RO*Nt/(1+(Nt/M))
Nt=100
Nt = RO*Nt/(1+(Nt/M))
Nt
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2)
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
for (i in 2:(t+1))
{
#initialise Nt as the new population size at t=0
Nt <- 100
Nt+1 <- RO*Nt/(1+(Nt/M))
df <- data.frame(Time=1:length(Nt), Nt)
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=2*N, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*N)
}
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2)
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
for (i in 2:(t+1))
{
#initialise Nt as the new population size at t=0
Nt <- 100
for(i in 2:length(N)){
Nt+1 <- RO*Nt/(1+(Nt/M))
}
df <- data.frame(Time=1:length(Nt), Nt)
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=2*N, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*N)
}
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
for(i in 2:length(N)){
Nt <- RO*Nt/(1+(Nt/M))
}
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2)
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
for (i in 2:(t+1))
{
#initialise Nt as the new population size at t=0
Nt <- 100
for(i in 2:length(N)){
Nt <- RO*Nt/(1+(Nt/M))
}
df <- data.frame(Time=1:length(Nt), Nt)
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=2*N, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*N)
}
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
#Initialise Nt
#initialise Nt as the new population size at t=0
Nt <- RO*ncol(population[[1]])/(1+(ncol(population[[1]])/M))
rm(list = ls())
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2) #initial population
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
#initialise Nt as the new population size at t=0
Nt <- RO*ncol(population[[1]])/(1+(ncol(population[[1]])/M))
for (i in 2:(t+1))
{
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=Nt, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*N)
Nt <- RO*ncol(population[[i]])/(1+(ncol(population[[i]])/M))
}
}
# PUT ALL YOUR OUTPUTS INTO ANOTHER LIST AND THEN RETURN THEM
return(list(population=population, allele.freq=allele.freq))
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
Nt
Nt <- floor(RO*ncol(population[[1]])/(1+(ncol(population[[1]])/M)))
source('~/Documents/Evolutionary_modelling/WF_simulation.r')
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2) #initial population
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
#initialise Nt as the new population size at t=0
Nt <- floor(RO*ncol(population[[1]])/(1+(ncol(population[[1]])/M)))
for (i in 2:(t+1))
{
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=Nt, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*N)
Nt <- RO*ncol(population[[i]])/(1+(ncol(population[[i]])/M))
}
# PUT ALL YOUR OUTPUTS INTO ANOTHER LIST AND THEN RETURN THEM
return(list(population=population, allele.freq=allele.freq))
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2) #initial population
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
#initialise Nt as the new population size at t=0
Nt <- floor(RO*ncol(population[[1]])/(1+(ncol(population[[1]])/M)))
for (i in 2:(t+1))
{
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=Nt, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(Nt)
Nt <- RO*ncol(population[[i]])/(1+(ncol(population[[i]])/M))
}
# PUT ALL YOUR OUTPUTS INTO ANOTHER LIST AND THEN RETURN THEM
return(list(population=population, allele.freq=allele.freq))
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
{
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=2*Nt, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*Nt)
Nt <- RO*ncol(population[[i]])/(1+(ncol(population[[i]])/M))
}
################################################
# SIMULATE GENETIC DRIFT
# FORWARD IN TIME
# ONE LOCUS, TWO ALLELES
################################################
sim.genetic.drift<-function(p=0.5, t=10, N=50, d=0.6, RO=2, M=10)
{
# DEFINITIONS TO THE INPUT ARGUMENTS
# p IS THE ALLELE FREQ FOR THE FIRST ALLELE (ALLELE 0)
# t IS THE NUMBER OF GENERATIONS
# N IS THE EFFECTIVE POPULATION SIZE
# DEFINE OUTPUTS
# 1) THE ALLELE CONFIG FOR THE ENTIRE POPULATION OVER TIME
# REPORT AS A LIST
population<-list()
length(population)<-t+1
# OPTIONAL, TO GIVE NAMES TO EVERY ELEMENTS OF population
names(population)<-rep(NA, t+1)
for (i in 1:length(population))
{names(population)[i]<-paste(c('generation', i-1), collapse='')}
# 2) I WOULD ALSO LIKE TO RETURN THE ALLELE FREQ OVER TIME
# AS A VECTOR
allele.freq<-rep(NA, t+1)
# TO ASSIGN INITIAL ALLELE COUNTS
k<-ceiling(2*N*p)
population[[1]]<-matrix(sample(c(rep(0, k), rep(1, 2*N-k))), nr=2) #initial population
# THE INITIAL ALLELE FREQ
allele.freq[1]<-sum(population[[1]]==0)/(2*N)
# PROPAGATION
#return a list of population showing changes in population size over the generations
#Initialise Nt
#initialise Nt as the new population size at t=0
Nt <- floor(RO*ncol(population[[1]])/(1+(ncol(population[[1]])/M)))
for (i in 2:(t+1))
{
# THE ALLELE CONFIG AT THE NEXT GEN
# FIRST WAY OF SAMPLING
population[[i]]<-matrix(sample(0:1, size=2*Nt, prob=c(allele.freq[i-1], 1-allele.freq[i-1]), replace=TRUE),
nr=2)
# ANOTHER WAY OF SAMPLING
#population[[i]]<-matrix(
#		sample(population[[i-1]], size=2*N, replace=TRUE),
#	nr=2)
# THE ALLELE FREQ AT THE NEXT GEN
allele.freq[i]<-sum(population[[i]]==0)/(2*Nt)
Nt <- RO*ncol(population[[i]])/(1+(ncol(population[[i]])/M))
}
# PUT ALL YOUR OUTPUTS INTO ANOTHER LIST AND THEN RETURN THEM
return(list(population=population, allele.freq=allele.freq))
}
#####
# TEST RUN
sim.genetic.drift(p=0.5, t=4, N=10, d=0.6, RO=2, M=10)
k
citation()
install.packages("installr")
install.packages("instaR")
source('~/CMEECoursework/CMEEProject/Code/TempCorrBacteria.r')
setwd('CMEECoursework/CMEEProject/Code/')
source('~/CMEECoursework/CMEEProject/Code/TempCorrBacteria.r')
source('~/CMEECoursework/CMEEProject/Code/TempCorrArchaea.r')
LT <- ggplot(data = subset, aes(x = AverageVolume, y = LowTemp_GR)) +
geom_smooth(method = "lm", se=FALSE, color="black", formula = y~x) +
stat_poly_eq(formula = y~x, eq.with.lhs=FALSE,
aes(label = paste("hat(italic(y))","~`=`~",..eq.label..,"~~~", ..rr.label.., sep = "")),
parse = TRUE, label.y.npc = 0.2) +
geom_point(col="darkblue") +  xlab("Log10 Average Volume (m^3)")+ ylab("Log10 Growth rate (12.8°C)")
print(LT)
source('~/CMEECoursework/CMEEProject/Code/TempCorrArchaea.r')
source('~/CMEECoursework/CMEEProject/Code/TempCorrArchaea.r')
formula <- y ~ poly(x, 3, raw = TRUE)
formula
plot(formula)
View(Average_volumes)
View(merged_DF)
source('~/CMEECoursework/CMEEProject/Code/TempCorrBacteria.r')
plot(merged_DF$AverageVolume, merged_DF$MidTemp_GR)
plot(merged_DF$AverageVolume, subset$MidTemp_GR)
plot(merged_DF$AverageVolume, subset$MidTemp_GR)
x <- (merged_DF$AverageVolume, na.rm=T)
x <- (merged_DF$AverageVolume na.rm=T)
x <- (merged_DF$AverageVolume, na.rm="TRUE")
View(subset)
View(merged_DF)
View(schoolfield_df)
