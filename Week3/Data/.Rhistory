class(v)
class (v)
a <- 4
a
a*a
a_squared <- a*a
sqrt (a_squared)
v <- c(0, 1, 2, 3, 4)
v
is.vector(v)
mean(v)
var(v)
median(v)
sum(v)
prod(v + 1)
length(v)
wing.width.cm <- 1.2
wing.length.cm <- c(4.7, 5.2, 4.8)
x <- (1 + (2*3)
v < TRUE
v <- TRUE
class(v)
v <- 3.2
class(V)
class(v)
v <- 2L
class(v)
v <- "A string"
class(v)
as.integer(3.1)
as.numeric(4)
as.roman(155)
as.character(155)
as.logical(5)
as.logical(0)
b <- NA
is.na(b)
b <- 0/0
b
is.nan(b)
b <- 5/0
b
a = 5
is.vector(a)
v1 = c(0.02, 0.5, 1)
v2 = c("a", "bc", "def", "ghij")
v3 = c(TRUE, TRUE, FALSE)
V1 <- C(0.02, TRUE, 1)
v1 <- c(0.02, TRUE, 1)
v1
v1 <- c(0.02, "Mary", 1)
v1
mat1 <- matrix(1:25, 5, 5)
mat1
mat1 <- matrix(1:25, 5, 5, byrow=TRUE)
mat1
arr1 <- array(1:50, c(5, 5, 2))
arr1
a <- c(1,5) + 2
a
x <- c(1,2); y <- c(5,3,9,2)
x + y
x + c(y,1)
getwd()
setwd("Documents/Stats_Julia/Week1")
d<-read.table("SparrowSize.txt", header=TRUE)
setwd("Documents/Stats_Julia/Week1/SparrowStats")
setwd("Documents/Stats_Julia/Week1/SparrowStats")
setwd("Documents/Stats_Julia/Week1/SparrowStats")
setwd(SparrowStats)
setwd("SparrowStats")
d<-read.table("SparrowSize.txt", header=TRUE)
str(d)
class(SparrowSize$Year)
class(d$Year)
class(d)
class(d$Mass)
class(d$Bill)
class(d$Wing)
class(d$Sex.1)
class(d$Sex)
par(mfrow=c(4,4))
par(mfrow=c(4,4))
hist(znormal, breaks=100)
abline(v=qnorm(c(0.25, 0.5, 0.75)), lwd=2)
abline(v=qnorm(c(0.025, 0.975)), lwd=2, lty="dashed")
plot(density(znormal))
hist(znormal, breaks=100)
hist(d$BirdID, breaks=10, col="grey")
hist(d$BirdID, breaks=3, col="grey")
hist(d$BirdID)
d<-read.table("SparrowSize.txt", header=TRUE)
str(d)
View(d)
hist(d$Year)
hist(d$Tarsus)
hist(d$Bill)
d<-read.table("SparrowSize.txt", header=TRUE)
str(d)
hist(d$Tarsus)
hist(d$Bill)
par(mfrow=c(1,1))
hist(d$Bill)
plot(1:40)
hist(d$Bill)
par(mar=c(4,4,4,4))
hist(d$Bill)
par(mar=c(4,4,4,7))
par(mar=c(4,7,4,7))
par(mar=c(4,7,6,7))
hist(d$Tarsus)
hist(rnorm(le2,0,1))
hist(d$Bill)
hist(d$Wing)
hist(d$Mass)
plot(density(Year))
plot(density(d$Year))
hist(d$Year)
sqrt(var(d$Tarsus)/length(d$Tarsus))
d<-read.table("SparrowSize.txt", header=TRUE, na.rm=TRUE)
str(d)
d<-read.table("SparrowSize.txt", header=TRUE, na.rm=TRUE)
d<-read.table("SparrowSize.txt", header=TRUE)
d2<-read.table("SparrowSize.txt", header=TRUE, na.rm=TRUE)
d2<-read.table("SparrowSize.txt", header=TRUE)
d<-read.table("SparrowSize.txt", header=TRUE)
str(d)
d2<-subset(d, header=TRUE, na.rm)
d2<-subset(d, header=TRUE, na.rm=TRUE)
length(d$Tarsus)
length(d2$Tarsus)
sqrt(var(d2$Tarsus)/length(d2$Tarsus))
d2<-subset(d, header=TRUE, na.rm=TRUE)
d2
?is.na
d4<- subset(d$Tarsus)[is.na(d$Tarsus)]
d4<- subset(d$Tarsus,[is.na(d$Tarsus)])
a <- 4
a
ls()
setwd(../../)
setwd("../../")
setwd("../CMEECoursework/Week3")
v<-(0, 1, 2, 3, 4)
v
v<-c(0, 1, 2, 3, 4)
v
is.integer(3)
seq(from=1, to=10, by=0.5)
a <- c(1,5) + 2
a
x<-c(1,2); y<-c(5,3,9,2)
x + y
x + c(y,1)
species.name <- "Quercus robur"
species.name
species.name <- 'Fraxinus excelsior'
species.name
paste("Quercus", "robur",sep=", ")
dir()
setwd("Data")
setwd("../")
MyData<- read.csv("../Data/trees.csv")
setwd("Data")
MyData<- read.csv("../Data/trees.csv")
ls()
head(MyData)
str(MyData)
MyData <- read.csv("../Data/trees.csv", header=TRUE)
MyData <- read.table("../Data/trees.csv", sep=',', header=TRUE)
head(MyData)
MyData <- read.csv("../Data/trees.csv", skip=5)
View(MyData)
getwd()
MyData<-read.csv("../Data/Trees.csv", header=TRUE) #import with headers
write.csv(MyData, "../Results/MyData.csv")
write.table(MyData[1,], file="../Results/MyData.csv",append=TRUE) #Append to it
write.csv(MyData, "../Results/MyData.csv", row.names=TRUE) #write row names
write.table(MyData, "../Results/MyData.csv", col.names=FALSE) #ignore column names
source('~/Documents/CMEECoursework/Week3/Code/basic_io.R')
source("basiic_io.R")
source("../Code/basic_io.R")
?source
source('~/.active-rstudio-document')
MyFunction <- function(Arg1, Arg2){
# Statements involving Arg1, Arg2:
print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type
return (c(Arg1, Arg2)) #this is optional, but very useful
}
# Statements involving Arg1, Arg2:
print(paste("Argument", as.character(Arg1), "is a", class(Arg1))) # print Arg1's type
print(paste("Argument", as.character(Arg2), "is a", class(Arg2))) # print Arg2's type
MyFunction(1,2) #test the function
MyFunction("Riki","Tiki") #A different test
source("boilerplate.R")
source("../Code/boilerplate.R")
source("../Code/boilerplate.R")
ls()
class(MyFunction)
# from its base and angle to its top, using the trigonometric formula
#
# height = distance * tan(radians)
#
# ARGUMENTS:
# degrees The angle of elevation in radians
# distance The distance from base (e.g., meters)
#
# OUTPUT:
# The heights of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
# from its base and angle to its top, using the trigonometric formula
#
# height = distance * tan(radians)
#
# ARGUMENTS:
# degrees The angle of elevation in radians
# distance The distance from base (e.g., meters)
#
# OUTPUT:
# The heights of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
# from its base and angle to its top, using the trigonometric formula
#
# height = distance * tan(radians)
#
# ARGUMENTS:
# degrees The angle of elevation in radians
# distance The distance from base (e.g., meters)
#
# OUTPUT:
# The heights of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
TreeHeight(37, 40)
q
# This function calculates heights of trees from the angle of
# elevation and the distance from the base using the trigonometric
# formula height = distance * tan(radians)
#
# ARGUMENTS:
# degrees The angle of elevation
# distance The distance from base
#
# OUTPUT:
# The height of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
TreeHeight(37, 40)
# This function calculates heights of trees from the angle of
# elevation and the distance from the base using the trigonometric
# formula height = distance * tan(radians)
#
# ARGUMENTS:
# degrees The angle of elevation
# distance The distance from base
#
# OUTPUT:
# The height of the tree, same units as "distance"
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
source('~/Documents/CMEECoursework/Week3/Code/TreeHeight.R')
q
TreeHeight(37, 40)
source("../Code/TreeHeight.R")
# This function calculates heights of trees from the angle of
# elevation and the distance from the base using the trigonometric
# formula height = distance * tan(radians)
#
# ARGUMENTS:
# degrees The angle of elevation
# distance The distance from base
#
# OUTPUT:
# The height of the tree, same units as "distance"
MyData<-read.csv("../Data/Trees.csv", header=TRUE)
ls()
MyData
head(MyData)
str(MyData)
names(MyData)
length(MyData)
length(MyData$Species)
TreeHeight <- function(MyData$Angle.degrees, MyData$Distance.m){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
TreeHeight <- function(MyData$degrees, MyData$distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
print(paste("Tree height is:", height))
return (height)
}
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
write.table(MyData[1,], file="../Results/MyData.csv", append=TRUE)
MyData
TreeHeight(MyData$degrees, MyData$distance)
TreeHeight(MyData$degrees, MyData$distance)
source('~/Documents/CMEECoursework/Week3/Code/TreeHeight.R')
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
MyData$Tree.Height.m <- c(TreeHeight)
MyData
MyData$Tree.Height.m <- (TreeHeight)
MyData$Tree.Height.m <- print(paste(height))
MyData
MyData$Tree.Height.m <- print(height)
TreeHeight()
TreeHeight
MyData$Tree.Height.m <- print(TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
MyData$Tree.Height.m <- print(paste(TreeHeight(MyData$Angle.degrees, MyData$Distance.m))
MyData
MyData$Tree.Height.m <- paste(TreeHeight(MyData$Angle.degrees, MyData$Distance.m))
MyData
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
MyData$Tree.Height.m <- paste(TreeHeight(MyData$Angle.degrees, MyData$Distance.m))
MyData$Tree.Height.m <- paste(TreeHeight(MyData$Angle.degrees, MyData$Distance.m))
source('~/Documents/CMEECoursework/Week3/Code/TreeHeight.R')
MyData$Tree.Height.m <- paste(TreeHeight(MyData$Angle.degrees, MyData$Distance.m))
MyData
print(paste(height))
print(paste(height))
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
MyData$Tree.Height.m <- paste(TreeHeight(MyData$Angle.degrees, MyData$Distance.m))
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
MyData
return (height)
TreeHeight <- function(degrees, distance){
radians <- degrees * pi / 180
height <- distance * tan(radians)
return (height)
}
return (height)
TreeHeight(MyData$Angle.degrees, MyData$Distance.m)
MyData$Tree.Height.m <- paste(TreeHeight(MyData$Angle.degrees, MyData$Distance.m))
MyData
MyData2 <- MyData$Tree.Height.m
MyData2
MyData
write.csv(MyData, "../Results/TreeHts.csv")
str(MyData)
