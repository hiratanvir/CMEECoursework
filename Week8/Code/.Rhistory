k = 8.6173303e-05
k
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, cubic_df, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, cubic_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
View(sfdf)
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, sfdf, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, cubic_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, sfdf, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, cubic_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
View(sfdf)
View(schoolfield_df)
schoolfield(4, sfdf, DF)
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, schoolfield_df, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, cubic_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
schoolfield(4, sfdf, DF)
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, cubic_model)
return(temp)
}
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, schoolfield_model)
return(temp)
}
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, schoolfield_df, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, schoolfield_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
schoolfield(4, sfdf, DF)
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, sfdf, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, schoolfield_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
schoolfield(4, sfdf, DF)
#!/usr/bin/env Rscript
rm(list=ls())
graphics.off()
require(ggplot2)
library(dplyr)
#load in TPC data set to get the x and y co-ordinates per group
df <- read.csv("../Results/final_dF.csv")
DF = df %>% group_by(uniqueID) %>% arrange(uniqueID) #orders the ID in ascending order
#load in the nlls results for the cubic model and plot the results using ggplot2
cubic_df <- read.csv("../Results/cubic_report.csv") #dataframe is already ordered by ID
#load in the nlls results for the full schoolfield model and plot the results on the same ggplot2 graph
schoolfield_df <- read.csv("../Results/schoolfield_report.csv")
#function returns a dataframe with with x values and expected y values when using the cubic model
cubic <- function(i, cubic_df, DF){
cdf = subset(cubic_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(cdf$status =="C"){
#parameter values for the cubic model
A1 <- cdf$A
B1 <- cdf$B
C1 <- cdf$C
D1 <- cdf$D
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
cubic_model <- A1 + B1*x_points + C1*x_points^2 + D1*x_points^3
temp <- data.frame(x_points, cubic_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
cubic(4, cubic_df, DF)
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, schoolfield_df, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x)))) + (exp((Eh/k)*((1/Th)-(1/x))))))
temp <- data.frame(x_points, schoolfield_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
schoolfield(4, schoolfield_df, DF)
schoolfield(1, schoolfield_df, DF)
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, schoolfield_df, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x_points)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x_points)))) + (exp((Eh/k)*((1/Th)-(1/x_points))))))
temp <- data.frame(x_points, schoolfield_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
schoolfield(1, schoolfield_df, DF)
pdf("../Results/nlls_plot.pdf")
for(i in unique(DF$uniqueID)[1:5]){
DF2 = subset(DF, uniqueID == i)
x_vals = DF2$Temp.kel.
y_vals = DF2$log_TraitValues
x = (cubic(i, cubic_df, DF)[1])
y = (cubic(i, cubic_df, DF)[2])
x2 = (schoolfield(i, schoolfield_df, DF)[1])
y2 = (schoolfield(i, schoolfield_df, DF)[2])
models_plot <- ggplot(DF2, aes(x=x_vals, y=y_vals, colour))+geom_point(color="blue")+
xlab("Temp(kelvin)")+
ylab("Log Trait Value")+
ggtitle(paste("Model plots for ID:",i))+
theme(plot.title = element_text(hjust = 0.5)) + geom_line(data=cubic(i, cubic_df, DF), aes(x, y, colour="Cubic model"))+
geom_line(data=schoolfield(i, schoolfield_df, DF), aes(x2, y2, colour="Schoolfield model"))
models_plot <- models_plot + labs(color='Legend')
print(models_plot)
}
for(i in unique(DF$uniqueID)[1:5]){
DF2 = subset(DF, uniqueID == i)
x_vals = DF2$Temp.kel.
y_vals = DF2$log_TraitValues
x = (cubic(i, cubic_df, DF)[1])
y = (cubic(i, cubic_df, DF)[2])
x2 = (schoolfield(i, schoolfield_df, DF)[1])
y2 = (schoolfield(i, schoolfield_df, DF)[2])
models_plot <- ggplot(DF2, aes(x=x_vals, y=y_vals, colour))+geom_point(color="blue")+
xlab("Temp(kelvin)")+
ylab("Log Trait Value")+
ggtitle(paste("Model plots for ID:",i))+
theme(plot.title = element_text(hjust = 0.5)) + geom_line(data=cubic(i, cubic_df, DF), aes(x, y, colour="Cubic model"))+
geom_line(data=schoolfield(i, schoolfield_df, DF), aes(x=x2, y=y2, colour="Schoolfield model"))
models_plot <- models_plot + labs(color='Legend')
print(models_plot)
}
print(models_plot)
print(models_plot)
for(i in unique(DF$uniqueID)[1:5]){
DF2 = subset(DF, uniqueID == i)
x_vals = DF2$Temp.kel.
y_vals = DF2$log_TraitValues
x = (cubic(i, cubic_df, DF)[1])
y = (cubic(i, cubic_df, DF)[2])
x2 = (schoolfield(i, schoolfield_df, DF)[1])
y2 = (schoolfield(i, schoolfield_df, DF)[2])
models_plot <- ggplot(DF2, aes(x=x_vals, y=y_vals, colour))+geom_point(color="blue")+
xlab("Temp(kelvin)")+
ylab("Log Trait Value")+
ggtitle(paste("Model plots for ID:",i))+
theme(plot.title = element_text(hjust = 0.5)) + geom_line(data=cubic(i, cubic_df, DF), aes(x, y, colour="Cubic model"))+
geom_line(data=schoolfield(i, schoolfield_df, DF), aes(x2, y2, colour="Schoolfield model"))
models_plot <- models_plot + labs(color='Legend')
print(models_plot)
}
rep(0, 100)
for(i in unique(DF$uniqueID)[1:5]){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals = DF2$Temp.kel.
y_vals = DF2$log_TraitValues
x = (cubic(i, cubic_df, DF)[1])
y = (cubic(i, cubic_df, DF)[2])
if(sfdf$status =="C"){
x2 = (schoolfield(i, schoolfield_df, DF)[1])
y2 = (schoolfield(i, schoolfield_df, DF)[2])
}
else{
x2 = rep(0, 100)
y2 = rep(0, 100)
}
models_plot <- ggplot(DF2, aes(x=x_vals, y=y_vals, colour))+geom_point(color="blue")+
xlab("Temp(kelvin)")+
ylab("Log Trait Value")+
ggtitle(paste("Model plots for ID:",i))+
theme(plot.title = element_text(hjust = 0.5)) + geom_line(data=cubic(i, cubic_df, DF), aes(x, y, colour="Cubic model"))+
geom_line(data=schoolfield(i, schoolfield_df, DF), aes(x2, y2, colour="Schoolfield model"))
models_plot <- models_plot + labs(color='Legend')
print(models_plot)
}
#!/usr/bin/env Rscript
rm(list=ls())
graphics.off()
require(ggplot2)
library(dplyr)
#load in TPC data set to get the x and y co-ordinates per group
df <- read.csv("../Results/final_dF.csv")
DF = df %>% group_by(uniqueID) %>% arrange(uniqueID) #orders the ID in ascending order
#load in the nlls results for the cubic model and plot the results using ggplot2
cubic_df <- read.csv("../Results/cubic_report.csv") #dataframe is already ordered by ID
#load in the nlls results for the full schoolfield model and plot the results on the same ggplot2 graph
schoolfield_df <- read.csv("../Results/schoolfield_report.csv")
#function returns a dataframe with with x values and expected y values when using the cubic model
cubic <- function(i, cubic_df, DF){
cdf = subset(cubic_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(cdf$status =="C"){
#parameter values for the cubic model
A1 <- cdf$A
B1 <- cdf$B
C1 <- cdf$C
D1 <- cdf$D
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
cubic_model <- A1 + B1*x_points + C1*x_points^2 + D1*x_points^3
temp <- data.frame(x_points, cubic_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
#function returns a dataframe with with x values and expected y values when using the schoolfield model
schoolfield <- function(i, schoolfield_df, DF){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals <- DF2$Temp.kel.
#y_vals <- DF$log_TraitValues
if(sfdf$status =="C"){
#parameter values for the cubic model
B0 <- sfdf$B0
E <- sfdf$E
Eh <- sfdf$Eh
El <- sfdf$El
Th <- sfdf$Th
Tl <- sfdf$Tl
# Define k, Boltzmann constant
k = 8.6173303e-05
#get a large number of equidistant points between the actual x points
x_points = seq(min(x_vals),max(x_vals),0.2)
#get the corresponding y_values from the sampled x_points using the model equation
schoolfield_model <- log((B0*exp((-E/k)*((1/x_points)-(1/283.15)))) / (1 + (exp((El/k)*((1/Tl)-(1/x_points)))) + (exp((Eh/k)*((1/Th)-(1/x_points))))))
temp <- data.frame(x_points, schoolfield_model)
return(temp)
}
else{
print("Model did not converge..")
}
}
pdf("../Results/nlls_plot.pdf")
for(i in unique(DF$uniqueID)[1:5]){
sfdf = subset(schoolfield_df, ID == i)
DF2 = subset(DF, uniqueID == i)
x_vals = DF2$Temp.kel.
y_vals = DF2$log_TraitValues
x = (cubic(i, cubic_df, DF)[1])
y = (cubic(i, cubic_df, DF)[2])
if(sfdf$status =="C"){
x2 = (schoolfield(i, schoolfield_df, DF)[1])
y2 = (schoolfield(i, schoolfield_df, DF)[2])
}
else{
x2 = rep(0, 100)
y2 = rep(0, 100)
}
models_plot <- ggplot(DF2, aes(x=x_vals, y=y_vals, colour))+geom_point(color="blue")+
xlab("Temp(kelvin)")+
ylab("Log Trait Value")+
ggtitle(paste("Model plots for ID:",i))+
theme(plot.title = element_text(hjust = 0.5)) + geom_line(data=cubic(i, cubic_df, DF), aes(x, y, colour="Cubic model"))+
geom_line(data=schoolfield(i, schoolfield_df, DF), aes(x2, y2, colour="Schoolfield model"))
models_plot <- models_plot + labs(color='Legend')
print(models_plot)
}
dev.off()
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
if(NA){
print(T)
}
if(NA == TRUE){
print(T)
}
if(NaN == TRUE){
print(T)
}
if(c(NaN) == TRUE){
print(T)
}
if(NULL){
print(T)
}
if(NULL == TRUE){
print(T)
}
NULL
NULL == T
NULL == T
NULL == F
is.null(NULL)
!is.null(NULL)
isTRUE(x)
isTRUE(df)
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
schoolout
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
install.packages("gridExtra")
library(grid)
library(gridExtra)
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
source('~/CMEECoursework/Week8/Code/nlls_plots.r')
